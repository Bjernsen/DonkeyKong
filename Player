using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System.Threading;

namespace DonkeyKong
{
    class Player
    {
        Texture2D texture;
        Vector2 destination, spawnPoint, position, direction, tilePosBelow;
        Rectangle sourceRect, destRect;
        Point currentFrame, numberOfFrames, characterSize;

        Point walkingFrameStart, walkingFrameStop;
        Point idleFrameStart;
        Point jumpingFrameStart, jumpingFrameStop;
        Point climbingFrameStart, climbingFrameStop;
        Point climbingEdgeFrameStart, climbingEdgeFrameStop;
        
        Point deathFrameStart, deathFrameStop;

        
        double timeSinceLastFrame;
        double timeBetweenFrames = 0.1;
        

        static readonly float speed = 150.0f;

        //float jumpSpeed = 50f;
        //double jumpTime, jumpTimer;

        bool alive, moving, jumping; 
        public bool hasHammer, reachedPauline, reachedTop;

        double timePassed;
        

        string highScoreText;
        string displayScore;
        string displayHighscore;
        
        int score;
        int currentHighscore;
        public int bonusScore;
        double scoreTimer, scoretime, screenScoreTime, screenScoreTimer;
        
        List<int> screenScoreList;

        Vector2 highScoreTextPos, highScorePos, scorePos, bonusScorePos, highscoreListPos;
        string[] highscoreArray;
        Rectangle bonusFramePos;
        StreamReader scoreReader;
        StreamWriter scoreWriter;
               

        int lives;
        Rectangle lifePos;
        

        public Player(Texture2D texture)
        {
            this.texture = texture;
            numberOfFrames = new Point(22, 1);
            currentFrame = new Point(1, 0);
            spawnPoint = new Vector2(120, 760);
            characterSize = new Point(40, 40);
            position = spawnPoint;
            destRect = new Rectangle((int)position.X, (int)position.Y, characterSize.X, characterSize.Y);
            tilePosBelow = tilePosBelow = new Vector2(position.X, position.Y + Game1.tileSize.Y);

            lives = 3;
            lifePos = new Rectangle((int)scorePos.X + 45, (int)scorePos.Y + 100, 40, 40);
          
            alive = true;
            moving = false;
            jumping = false;
            hasHammer = false;
            reachedPauline = false;
            
            //jumpTime = 0.5;

            sourceRect = new Rectangle(currentFrame.X * texture.Width / numberOfFrames.X, currentFrame.Y * texture.Height / numberOfFrames.Y, texture.Width / numberOfFrames.X, texture.Height / numberOfFrames.Y);

            walkingFrameStart = new Point(0, 0);
            walkingFrameStop = new Point(2, 0);
            idleFrameStart = new Point(1, 0);
            jumpingFrameStart = new Point(11, 0);
            jumpingFrameStop = new Point(12, 0);
            climbingFrameStart = new Point(9, 0);
            climbingFrameStop = new Point(10, 0);
            climbingEdgeFrameStart = new Point(13, 0);
            climbingEdgeFrameStop = new Point(14, 0);
            deathFrameStart = new Point(16, 0);
            deathFrameStop = new Point(20, 0);

            highScoreText = "HIGH SCORE";
            highscoreArray = new string[9];
            highscoreListPos = new Vector2(300, 140);
            scoretime = 1;
            screenScoreTime = 0.5;
            
            screenScoreList = new List<int>(1) { 0 };
            scorePos = new Vector2(50, 50);
            highScorePos = new Vector2(420, 50);
            highScoreTextPos = new Vector2(350, 10);
            bonusScorePos = new Vector2(816, 200);
            bonusFramePos = new Rectangle(785, 160, TextureManager.bonusFrameTex.Width * 2, TextureManager.bonusFrameTex.Height*2);
            
            bonusScore = 5000;
            displayScore = score.ToString("000000");


            scoreReader = new StreamReader("Highscores.txt");
            Int32.TryParse(scoreReader.ReadLine(), out currentHighscore);
            displayHighscore = currentHighscore.ToString("000000");
            scoreReader.Close();


        }

        public void Animate(GameTime gameTime, Point start, Point stop)
        {
            timeSinceLastFrame += gameTime.ElapsedGameTime.TotalSeconds;
            
            if (timeSinceLastFrame >= timeBetweenFrames)
            {
                timeSinceLastFrame -= timeBetweenFrames;
                currentFrame.X++;
                if (currentFrame.X > stop.X || currentFrame.X < start.X)
                {
                    currentFrame.X = start.X;
                }
                if (currentFrame.X >= numberOfFrames.X)
                {
                    
                    currentFrame.X = start.X;
                }
                
            }

            sourceRect.X = currentFrame.X * texture.Width / numberOfFrames.X;
            sourceRect.Y = currentFrame.Y * texture.Height / numberOfFrames.Y;

        }

        

        public void Update(GameTime gameTime)
        {

            CheckWin();

            timeBetweenFrames = 0.1;
            HandleScore(gameTime);
            Move(gameTime);
            


        }

        public void ChangeDirection(Vector2 dir)
        {
            direction = dir;
            Vector2 newDestination = position + direction * Game1.tileSize.X;

            if (Level.GetTileAtPosition(new Vector2(position.X + (direction.X * Game1.tileSize.X), position.Y + Game1.tileSize.Y)) != Tile.Tiles.Empty) // om tilen under nästa tile är empty
            {
                destination = newDestination;
                moving = true;
            }

            
        }

        public void CheckWin()
        {
            if (position.Y <= 200 && position.X > 400 && position.X < 600)
            {
                reachedPauline = true;
            }
            else if (position.Y <= 200)
            {
                reachedTop = true;
            }
        }

        //public void Jump(Vector2 dir)
        //{
        //    direction = dir;
        //    Vector2 newDestination = new Vector2(position.X + (direction.X * Game1.tileSize.X * 2), position.Y);
        //    if (Level.GetTileAtPosition(new Vector2(position.X + (direction.X * Game1.tileSize.X * 2), position.Y)) == Tile.Tiles.BridgeLadder || Level.GetTileAtPosition(new Vector2(position.X + (direction.X * Game1.tileSize.X * 2), position.Y)) == Tile.Tiles.Bridge) 
        //    {
        //        destination = newDestination;
        //        jumping = true;
        //        moving = false;
        //    }
        //}

        public void Move(GameTime gameTime)
        {
            //if (Keyboard.GetState().IsKeyDown(Keys.Space))
            //{
            //    Jump(new Vector2(direction.X, -1));
            //}


            if (moving == false)
            {

                if (Level.GetTileAtPosition(tilePosBelow) == Tile.Tiles.Sprint)
                {
                    Level.GetTileStateAtPosition(tilePosBelow).walkedOn = true;
                    AddToScore(100);
                    screenScoreList[0] = 100;
                }
                if (direction.X != 0)
                {
                    Animate(gameTime, idleFrameStart, idleFrameStart);
                }
                else if (direction.Y != 0 && Level.GetTileAtPosition(position) == Tile.Tiles.Empty)
                {
                    Animate(gameTime, new Point(15, 0), new Point(15, 0));
                }
                
                if (Keyboard.GetState().IsKeyDown(Keys.D) && Level.GetTileAtPosition(tilePosBelow) != Tile.Tiles.Ladder)
                {
                    
                    ChangeDirection(new Vector2(1, 0));
                }
                else if (Keyboard.GetState().IsKeyDown(Keys.A) && Level.GetTileAtPosition(tilePosBelow) != Tile.Tiles.Ladder)
                {

                    ChangeDirection(new Vector2(-1, 0));
                }
                else if (Keyboard.GetState().IsKeyDown(Keys.W) && Level.GetTileAtPosition(position) == Tile.Tiles.Ladder || Keyboard.GetState().IsKeyDown(Keys.W) && Level.GetTileAtPosition(position) == Tile.Tiles.BridgeLadder)
                {
                    ChangeDirection(new Vector2(0, -1));
                }
                else if (Keyboard.GetState().IsKeyDown(Keys.S) && Level.GetTileAtPosition(tilePosBelow) == Tile.Tiles.Ladder || Keyboard.GetState().IsKeyDown(Keys.S) && Level.GetTileAtPosition(tilePosBelow) == Tile.Tiles.BridgeLadder)
                {
                    ChangeDirection(new Vector2(0, 1));
                }
            }
            else if (moving /*&& !jumping*/)
            {
                if (direction.X != 0)
                {
                    Animate(gameTime, walkingFrameStart, walkingFrameStop);
                }
                else if (direction.Y != 0 && Level.GetTileAtPosition(position) == Tile.Tiles.Empty)
                {
                    Animate(gameTime, climbingEdgeFrameStart, climbingEdgeFrameStop);
                }
                else if (direction.Y != 0)
                {
                    Animate(gameTime, climbingFrameStart, climbingFrameStop);
                }
                

                position += direction * speed * (float)gameTime.ElapsedGameTime.TotalSeconds;
                tilePosBelow.X = position.X;
                tilePosBelow.Y = position.Y + Game1.tileSize.Y;
                destRect.X = (int)position.X;
                destRect.Y = (int)position.Y;

                if (Vector2.Distance(position, destination) < 1)
                {
                    position = destination;
                    destRect.X = (int)position.X;
                    destRect.Y = (int)position.Y;
                    tilePosBelow.X = position.X;
                    tilePosBelow.Y = position.Y + Game1.tileSize.Y;
                    moving = false;
                }
            }
            //else if (jumping)
            //{
            //    jumpTimer += gameTime.ElapsedGameTime.TotalSeconds;

            //    if (jumpTimer < jumpTime)
            //    {
            //        Animate(gameTime, jumpingFrameStart, jumpingFrameStart);

            //        position += direction * jumpSpeed / (float)jumpTimer / (float)gameTime.ElapsedGameTime.TotalSeconds;
            //    }
            //    else if (jumpTimer < jumpTime * 2)
            //    {
            //        Animate(gameTime, jumpingFrameStop, jumpingFrameStop);
            //        direction.Y = direction.Y * -1;

            //        position += direction * jumpSpeed * (float)jumpTimer * (float)gameTime.ElapsedGameTime.TotalSeconds;
                   
            //    }
            //    else if (jumpTimer >= jumpTime * 2)
            //    {
            //        position = destination;
            //        jumping = false;
            //    }

            //}
            
            
        }
        
        public void StartDeathAnimation(GameTime gameTime)
        {
            timeBetweenFrames = 0.5f;
            Animate(gameTime, deathFrameStart, deathFrameStop);
        }

       

        public void LoseLife(GameTime gameTime)
        {
            lives--;
            
            if (lives <= 0)
            {
                alive = false;
            }
            
            
        }


        public Rectangle getHitBox()
        {
            return new Rectangle(destRect.X + 5, destRect.Y + 10, (int)Game1.tileSize.X - 10, (int)Game1.tileSize.Y - 20);
        }

        public void ResetAfterLifeLost()
        {
            moving = false;
            position = spawnPoint;
            direction = new Vector2(1, 0);
            destRect.X = (int)spawnPoint.X;
            destRect.Y = (int)spawnPoint.Y;
            tilePosBelow.X = position.X;
            tilePosBelow.Y = position.Y + Game1.tileSize.Y;
        }
        

        public bool IsAlive()
        {
            return alive;
        }

        public void HandleScore(GameTime gameTime)
        {
            if (KeyMouseReader.LeftClick())
            {
                LoseLife(gameTime);
                
            }

            ReadHighscore();

            if (currentHighscore <= score)
            {
                WriteHighscore();
            }
            
            

            timePassed += gameTime.ElapsedGameTime.TotalSeconds;

            if (timePassed > 2)
            {
                bonusScore = bonusScore - 100;
                if (bonusScore <= 0)
                {
                    alive = false;
                    bonusScore = 0;
                }
                timePassed = 0;
            }
        }

        public void WriteHighscore()
        {
            scoreWriter = new StreamWriter("Highscores.txt");
            if (currentHighscore <= score)
            {
                scoreWriter.WriteLine(score);
            }
            
            scoreWriter.Close();
        }

        public void ReadHighscore()
        {
            scoreReader = new StreamReader("Highscores.txt");
            Int32.TryParse(scoreReader.ReadLine(), out currentHighscore);
            displayHighscore = currentHighscore.ToString("000000");
            scoreReader.Close();
        }

        public void AddToScore(int addition)
        {
            score += addition;
            displayScore = score.ToString("000000");
        }


        public void ResetGame()
        {
            lives = 3;
            score = 0;
            displayScore = score.ToString("000000");
            bonusScore = 5000;
            moving = false;
            alive = true;
            hasHammer = false;
            reachedPauline = false;
            reachedTop = false;
            position = spawnPoint;
            destRect.X = (int)spawnPoint.X;
            destRect.Y = (int)spawnPoint.Y;
            
        }
       
        public void DrawPlayer(SpriteBatch sb)
        {
            if (direction.X == -1)
            {
                sb.Draw(texture, destRect, sourceRect, Color.White, 0f, new Vector2(0, 0), SpriteEffects.FlipHorizontally, 0f);
            }
            else
            {
                sb.Draw(texture, destRect, sourceRect, Color.White);
            }
        }

        public void DrawUI(SpriteBatch sb, GameTime gameTime)
        {
            Vector2 tempPos = new Vector2(destRect.X + (int)direction.X * -1 * 40, destRect.Y + 10);
            screenScoreTimer += gameTime.ElapsedGameTime.TotalSeconds;
            if (screenScoreList[0] != 0)
            {
                sb.DrawString(TextureManager.smallFont, screenScoreList[0].ToString(), tempPos, Color.White);
            }
            
            if (screenScoreTimer >= screenScoreTime)
            {
                screenScoreList[0] = 0;
                screenScoreTimer -= screenScoreTime;
            }

            sb.Draw(TextureManager.bonusFrameTex, bonusFramePos, Color.White);
            for (int i = 0; i < lives; i++)
            {
                sb.Draw(TextureManager.lifeTex, new Rectangle(lifePos.X + (i * 40), lifePos.Y, lifePos.Width, lifePos.Height), Color.White);
            }
            
            sb.DrawString(TextureManager.adore64Font, highScoreText, highScoreTextPos, Color.Red);
            sb.DrawString(TextureManager.adore64Font, "" + displayScore, scorePos, Color.White);
            sb.DrawString(TextureManager.adore64Font, "" + displayHighscore, highScorePos, Color.White);
            sb.DrawString(TextureManager.adore64Font, "" + bonusScore, bonusScorePos, Color.Goldenrod);
            
        }

        public void DrawScoreAddition(SpriteBatch sb, GameTime gameTime, int value)
        {
            scoreTimer += gameTime.ElapsedGameTime.TotalSeconds;

            if (scoreTimer >= scoretime)
            {
                scoreTimer -= scoretime;
            }
            else if (scoreTimer > 0.4)
            {
                sb.DrawString(TextureManager.smallFont, "" + value, new Vector2(destRect.X + (int)direction.X * 40, destRect.Y + 10), Color.White);
                
            }
            else if (scoreTimer < 0.1)
            {
                sb.Draw(TextureManager.scoreAni1, new Rectangle(destRect.X + (int)direction.X * 40, destRect.Y + 10, 20, 20), Color.White);
            }
            else if (scoreTimer < 0.2)
            {
                sb.Draw(TextureManager.scoreAni2, new Rectangle(destRect.X + (int)direction.X * 40, destRect.Y + 10, 20, 20), Color.White);
            }
            else if (scoreTimer < 0.3)
            {
                sb.Draw(TextureManager.scoreAni3, new Rectangle(destRect.X + (int)direction.X * 40, destRect.Y + 10, 20, 20), Color.White);
            }
            else if (scoreTimer < 0.4)
            {
                sb.Draw(TextureManager.scoreAni4, new Rectangle(destRect.X + (int)direction.X * 40, destRect.Y + 10, 20, 20), Color.White);
            }
            

            
        }

        public void MakeHighscoreList()
        {
            int scoreInt = 0;
            scoreReader = new StreamReader("Highscores.txt");
            while (!scoreReader.EndOfStream)
            {
                for (int i = 0; i < highscoreArray.Length; i++)
                {
                    Int32.TryParse(scoreReader.ReadLine(), out scoreInt);
                    highscoreArray[i] = scoreInt.ToString("000000");
                }
                
            }
            scoreReader.Close();
        }

        public void DrawScore(SpriteBatch sb)
        {
            sb.DrawString(TextureManager.adore64Font, "YOUR SCORE WAS:\n\n     " + displayScore, new Vector2(240, 400), Color.White);
        }

        public void DrawHighscoreList(SpriteBatch sb)
        {
            int index = 0;
            
            foreach (string s in highscoreArray)
            {
                index++;
                sb.DrawString(TextureManager.adore64Font, index + ". " + s, new Vector2(highscoreListPos.X, highscoreListPos.Y + index * 60), Color.White);

            }
            
        }
    }
}
