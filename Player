using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace DonkeyKong
{
    class Player
    {
        Texture2D texture;
        Vector2 position, destination, direction, belowPosition, characterHeight, oldDir;
        Rectangle destRect, sourceRect;
        Point numberOfFrames;
        Point walkingFramesIndices;
        Point jumpingFrameIndices;
        Point hammerFrameIndices;
        Point climbingFrameIndices;
        double timeSinceLastFrame;
        double timeBetweenFrames = 0.1;
        Point walkFrame, climbFrame, hammerFrame, jumpFrame, currentFrame;


        static readonly float speed = 150.0f;
        static readonly float fallingSpeed = 200.0f;
        static readonly float jumpDuration = 750.0f;
        bool moving;
        bool jumping;
        bool falling;
        bool hammer;
        bool climbing;
        bool dead;

        double timePassed;
        float jumpTimer = 0;

        string highScoreText;
        string displayScore;
        string displayHighscore;
        string bonusScoreText;
        int score;
        int currentHighscore;
        int bonusScore;
        Vector2 highScoreTextPos, highScorePos, scorePos, bonusTextPos, bonusScorePos;
        StreamReader scoreReader;
        StreamWriter scoreWriter;

        

        int lives;
        Vector2 lifePos;
        

        public Player(Texture2D texture)
        {
            this.texture = texture;

            characterHeight = new Vector2(0, texture.Height);

            lives = 5;
            position = new Vector2(320, 766);
            belowPosition = position + characterHeight;
            moving = false;
            jumping = false;
            falling = false;
            dead = false;
            destRect = new Rectangle(new Point((int)position.X, (int)position.Y), new Point(texture.Width / 2, texture.Height));


            walkingFramesIndices = new Point(0, 3);
            jumpingFrameIndices = new Point(0, 9);
            hammerFrameIndices = new Point(3, 7);
            climbingFrameIndices = new Point(2, 7);
            walkFrame = new Point(0, 0);
            jumpFrame = new Point(0, 1);
            hammerFrame = new Point(3, 0);
            climbFrame = new Point(2, 1);
            numberOfFrames = new Point(7, 2);
            currentFrame = new Point(0, 0);
            sourceRect = new Rectangle(currentFrame.X * texture.Width / numberOfFrames.X, currentFrame.Y * texture.Height / numberOfFrames.Y, texture.Width / numberOfFrames.X, texture.Height / numberOfFrames.Y);

            highScoreText = "HIGH SCORE";
            scorePos = new Vector2(50, 50);
            highScorePos = new Vector2(420, 50);
            highScoreTextPos = new Vector2(350, 10);
            bonusScorePos = new Vector2(816, 200);
            bonusTextPos = new Vector2(800, 150);
            bonusScoreText = "BONUS";
            bonusScore = 5000;
            displayScore = score.ToString("000000");


            scoreReader = new StreamReader("Highscores.txt");
            Int32.TryParse(scoreReader.ReadLine(), out currentHighscore);
            displayHighscore = currentHighscore.ToString("000000");
            scoreReader.Close();


        }

        public void AnimateWalking(GameTime gameTime)
        {
            timeSinceLastFrame += gameTime.ElapsedGameTime.TotalSeconds;
            
            if (timeSinceLastFrame >= timeBetweenFrames)
            {
                timeSinceLastFrame -= timeBetweenFrames;
                currentFrame.X++;
                if (currentFrame.X >= walkingFramesIndices.Y)
                {
                    currentFrame.X = 0;
                }
            }

            sourceRect.X = currentFrame.X * texture.Width / numberOfFrames.X;
            sourceRect.Y = currentFrame.Y * texture.Height / numberOfFrames.Y;

        }

        public void AnimateJumping(GameTime gameTime)
        {
            timeSinceLastFrame += gameTime.ElapsedGameTime.TotalSeconds;
            
            if (timeSinceLastFrame >= timeBetweenFrames)
            {
                timeSinceLastFrame -= timeBetweenFrames;
                currentFrame.X++;
                if (currentFrame.X >= jumpingFrameIndices.Y)
                {
                    currentFrame.X = 8;
                }
            }

            sourceRect.X = currentFrame.X * texture.Width / numberOfFrames.X;
            sourceRect.Y = currentFrame.Y * texture.Height / numberOfFrames.Y;

        }

        public void Update(GameTime gameTime)
        {
            destRect.X = (int)position.X;
            destRect.Y = (int)position.Y;

            

            Move(gameTime);

            if (KeyMouseReader.LeftClick())
            {
                score += 10;
                displayScore = score.ToString("000000");
            }

            ReadHighscore();

            if (currentHighscore <= score)
            {
                WriteHighscore();
            }

            timePassed += gameTime.ElapsedGameTime.TotalSeconds;

            if (timePassed > 2)
            {
                bonusScore = bonusScore - 100;
                if (bonusScore <= 0)
                {
                    bonusScore = 0;
                }
                timePassed = 0;
            }
                                 
        }

        public void ChangeDirection(Vector2 dir)
        {
            direction = dir;
            Vector2 newDestination = position + direction * 40.0f;

            if (Level.GetTileAtPosition(newDestination) == Tile.Tiles.Empty && direction.Y >= 0 && Level.GetTileAtPosition(belowPosition) != Tile.Tiles.Ladder)
            {
                destination = newDestination;
                moving = true;
            }
            else if (Level.GetTileAtPosition(newDestination) == Tile.Tiles.Empty && Level.GetTileAtPosition(position) == Tile.Tiles.BridgeLadder)
            {
                destination = newDestination;
                moving = true;
            }
            else if (Level.GetTileAtPosition(newDestination) == Tile.Tiles.Ladder)
            {
                destination = newDestination;
                moving = true;
            }
            else if (Level.GetTileAtPosition(newDestination) == Tile.Tiles.BridgeLadder)
            {
                destination = newDestination;
                moving = true;
            }
        }

        public void CheckFall(GameTime gameTime)
        {
            if (Level.GetTileAtPosition(belowPosition) == Tile.Tiles.Empty)
            {
                falling = true;
                direction = new Vector2(0, 1);
                position += direction * fallingSpeed * (float)gameTime.ElapsedGameTime.TotalSeconds;
                belowPosition = position + characterHeight;
            }
        }


        public void Move(GameTime gameTime)
        {
            if (Level.GetTileAtPosition(belowPosition) == Tile.Tiles.Bridge || Level.GetTileAtPosition(belowPosition) == Tile.Tiles.BridgeLadder)
            {
                falling = false;
            }

            if (KeyMouseReader.KeyPressed(Keys.Space) && falling == false)
            {
                if (Level.GetTileAtPosition(belowPosition) == Tile.Tiles.Bridge && Level.GetTileAtPosition(position) != Tile.Tiles.Ladder && jumping == false || Level.GetTileAtPosition(belowPosition) == Tile.Tiles.BridgeLadder && Level.GetTileAtPosition(position) != Tile.Tiles.Ladder && jumping == false)
                {
                    jumpTimer = 0;
                    oldDir = direction;
                    direction = new Vector2(direction.X, -1);
                    moving = true;
                    jumping = true;


                }
            }

            if (jumping)
            {
                
                AnimateJumping(gameTime);
                jumpTimer += (float)gameTime.ElapsedGameTime.TotalMilliseconds;



                if (jumpTimer >= jumpDuration / 2)
                {
                    direction = new Vector2(direction.X, 1);                    

                }
                if (jumpTimer >= jumpDuration - 40)
                {
                    jumpTimer = 0;
                    direction = oldDir;
                    jumping = false;
                    moving = false;
                }
            }

          

            if (moving == false && falling == false && jumping == false)
            {
                CheckFall(gameTime);
                if (Keyboard.GetState().IsKeyDown(Keys.A))
                {
                    ChangeDirection(new Vector2(-1, 0));
                }
                else if (Keyboard.GetState().IsKeyDown(Keys.W))
                {
                    ChangeDirection(new Vector2(0, -1));
                }
                else if (Keyboard.GetState().IsKeyDown(Keys.D))
                {
                    ChangeDirection(new Vector2(1, 0));
                }
                else if (Keyboard.GetState().IsKeyDown(Keys.S))
                {
                    ChangeDirection(new Vector2(0, 1));
                }
                
            }
            else
            {
                
                AnimateWalking(gameTime);
                position += direction * speed * (float)gameTime.ElapsedGameTime.TotalSeconds;
                belowPosition = position + characterHeight;

                if (Vector2.Distance(position, destination) < 2)
                {
                    position = destination;
                    direction = new Vector2(0, 0);
                    moving = false;
                }
            }
        }

        public bool IsDead()
        {
            return dead;
        }

        public void WriteHighscore()
        {
            scoreWriter = new StreamWriter("Highscores.txt");
            scoreWriter.WriteLine(score);
            scoreWriter.Close();
        }

        public void ReadHighscore()
        {
            scoreReader = new StreamReader("Highscores.txt");
            Int32.TryParse(scoreReader.ReadLine(), out currentHighscore);
            displayHighscore = currentHighscore.ToString("000000");
            scoreReader.Close();
        }

       
        public void DrawPlayer(SpriteBatch sb)
        {
            sb.Draw(texture, destRect, sourceRect, Color.White);
        }

        public void DrawUI(SpriteBatch sb)
        {
            sb.DrawString(TextureManager.adore64Font, highScoreText, highScoreTextPos, Color.Red);
            sb.DrawString(TextureManager.adore64Font, "" + displayScore, scorePos, Color.White);
            sb.DrawString(TextureManager.adore64Font, "" + displayHighscore, highScorePos, Color.White);
            sb.DrawString(TextureManager.adore64Font, "" + bonusScore, bonusScorePos, Color.Goldenrod);
            sb.DrawString(TextureManager.adore64Font, bonusScoreText, bonusTextPos, Color.Blue);
        }
    }
}
