using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace DonkeyKong
{
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        Level level;
        Player player;
        Vector2 oilSpawn1, oilSpawn2, oilSpawn3, oilSpawn4;
        Monkey donkeyKong;
        Lover pauline;
        Item dress, umbrella, phone, hammer;
        Item destroy;
        List<Item> itemList;
        Rectangle dressPos, umbPos, phonePos, hammerPos;
        Random rand;
        TextureManager texMan;
        List<Enemy> enemyList;

        double timeSinceLastEnemy, enemySpawnTimer, deathAnimationDuration, deathAnimationTimer;

        int scoreVal;

        public static readonly Vector2 tileSize = new Vector2(40, 40);
        public static readonly int windowWidth = 1040;
        public static readonly int windowHeight = 826;

        string startScreenText, loseScreenText;
        double scoreTimer, scoretime, winTimer, winTime;

        enum GameState
        {
            Start,
            Playing,
            DeathFreeze,
            ItemFreeze,
            Fallout,
            Lose,
            Win,
            HighScores,
            CharacterSelect
        }

        GameState currentGameState;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            graphics.PreferredBackBufferWidth = windowWidth;
            graphics.PreferredBackBufferHeight = windowHeight;
            graphics.ApplyChanges();
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            enemyList = new List<Enemy>();
            itemList = new List<Item>();

            phonePos = new Rectangle(20 * 40, 640, 40, 40);
            hammerPos = new Rectangle(12 * 40, 380, 40, 40);
            dressPos = new Rectangle(4 * 40, 280, 40, 40);
            umbPos = new Rectangle(21 * 40, 280, 40, 40);

            enemySpawnTimer = 3;
            deathAnimationDuration = 2.5;
            scoretime = 1;
            winTimer = 3;
            

            oilSpawn1 = new Vector2(25 * 40, 760);
            oilSpawn2 = new Vector2(25 * 40, 640);
            oilSpawn3 = new Vector2(24 * 40, 520);
            oilSpawn4 = new Vector2(23 * 40, 400);
;
            spriteBatch = new SpriteBatch(GraphicsDevice);
            texMan = new TextureManager(Content);
            level = new Level("Map1.txt");
            player = new Player(TextureManager.marioSpritesheetTex);
            donkeyKong = new Monkey(TextureManager.donkeyKongSpritesheetTex, new Rectangle(12 * 40, 205, 120, 120), new Point(4, 1));
            pauline = new Lover(TextureManager.paulineTex, new Rectangle(13 * 40, 160, 40, 40), new Point(1, 1));

            dress = new Item(TextureManager.dressTex, dressPos, 300, false);
            phone = new Item(TextureManager.phoneTex, phonePos, 200, false);
            umbrella = new Item(TextureManager.umbrellaTex, umbPos, 300, false);
            hammer = new Item(TextureManager.hammerTex, hammerPos, 100, true);

            FillItemList();
            

            startScreenText = "PRESS ENTER TO PLAY\nPRESS SPACE TO CHOOSE\nCHARACTER";
            loseScreenText = "PRESS ENTER TO PLAY AGAIN\nPRESS SPACE FOR MAIN MENU";
         
            level.BuildMap();

            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// game-specific content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            //IsMouseVisible = true;
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
            {
               
                Exit();
            }
                
            KeyMouseReader.Update();

            switch (currentGameState)
            {
                case GameState.Start:
                    if (Keyboard.GetState().IsKeyDown(Keys.Enter))
                    {
                        currentGameState = GameState.Playing;
                    }
                    if (Keyboard.GetState().IsKeyDown(Keys.Space))
                    {
                        currentGameState = GameState.CharacterSelect;
                    }
                    break;

                case GameState.Playing:

                    if (!player.IsAlive())
                    {
                        currentGameState = GameState.Lose;
                    }
                    timeSinceLastEnemy += gameTime.ElapsedGameTime.TotalSeconds;

                    if (timeSinceLastEnemy >= enemySpawnTimer)
                    {
                        timeSinceLastEnemy -= enemySpawnTimer;
                        SpawnEnemy();
                    }

                    level.UpdateMap();
                    player.Update(gameTime);
                    donkeyKong.Update(gameTime);
                    pauline.Update(gameTime);
                    

                    foreach (Enemy e in enemyList)
                    {
                        e.Update(gameTime);

                        if (player.getHitBox().Intersects(e.getHitBox()))
                        {
                            player.LoseLife(gameTime);
                            currentGameState = GameState.DeathFreeze;
                        }
                    }
                    foreach (Item i in itemList)
                    {
                        if (player.getHitBox().Intersects(i.getHitBox()))
                        {
                            scoreVal = i.getValue();
                            player.AddToScore(i.getValue());
                            if (i.isHammer)
                            {
                                player.hasHammer = true;
                            }
                            destroy = i;
                            currentGameState = GameState.ItemFreeze;
                        }
                    }

                    itemList.Remove(destroy);

                    if (player.getHitBox().Intersects(donkeyKong.getHitBox())) 
                    {
                        player.LoseLife(gameTime);
                        currentGameState = GameState.DeathFreeze;
                    }

                    
                    if (level.levelComplete)
                    {
                        player.AddToScore(player.bonusScore);
                        player.ResetAfterLifeLost();
                        currentGameState = GameState.Fallout;
                    }
                    break;

                case GameState.DeathFreeze:

                    player.StartDeathAnimation(gameTime);

                    deathAnimationTimer += gameTime.ElapsedGameTime.TotalSeconds;

                    

                    if (deathAnimationTimer >= deathAnimationDuration + 0.3)
                    {
                        
                        player.ResetAfterLifeLost();
                        deathAnimationTimer = 0;
                        currentGameState = GameState.Playing;
                    }

                    break;

                case GameState.ItemFreeze:

                    scoreTimer += gameTime.ElapsedGameTime.TotalSeconds;

                    if (scoreTimer >= scoretime)
                    {
                        scoreTimer = 0;
                        currentGameState = GameState.Playing;
                    }

                    break;

                case GameState.Fallout:
                    
                    donkeyKong.falling = true;
                    level.BuildFallout();
                    donkeyKong.Update(gameTime);
                    
                    player.Update(gameTime);

                    if (player.reachedPauline)
                    {
                        winTimer += gameTime.ElapsedGameTime.TotalSeconds;

                        if (winTimer > winTime)
                        {
                            winTimer = 0;
                            currentGameState = GameState.Win;
                        }
                    }
                    
                    break;

                case GameState.Lose:
                    if (Keyboard.GetState().IsKeyDown(Keys.Enter))
                    {
                        ResetGame();
                        currentGameState = GameState.HighScores;
                    }
                    break;

                case GameState.Win:
                    if (Keyboard.GetState().IsKeyDown(Keys.Enter))
                    {
                        
                        currentGameState = GameState.HighScores;
                    }
                    break;

                case GameState.HighScores:
                    player.MakeHighscoreList();
                    if (KeyMouseReader.KeyPressed(Keys.Enter))
                    {
                        ResetGame();
                        
                        currentGameState = GameState.Playing;
                    }
                    if (Keyboard.GetState().IsKeyDown(Keys.Space))
                    {
                        ResetGame();
                        currentGameState = GameState.Start;
                    }
                    break;
            }

            
            

            

            // TODO: Add your update logic here

            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.Black);

            spriteBatch.Begin();
            switch (currentGameState)
            {
                case GameState.Start:
                    spriteBatch.Draw(TextureManager.startScreenTex, new Vector2(0, 0), Color.White);
                    spriteBatch.DrawString(TextureManager.adore64Font, startScreenText, new Vector2(200, 650), Color.White);
                    break;

                case GameState.Playing:

                    level.DrawMap(spriteBatch);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn1, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn2, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn3, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn4, Color.White);
                    foreach (Enemy e in enemyList)
                    {
                        e.Draw(spriteBatch);
                    }
                    foreach (Item i in itemList)
                    {
                        i.Draw(spriteBatch);
                    }
                    donkeyKong.Draw(spriteBatch);
                    pauline.Draw(spriteBatch);
                    player.DrawPlayer(spriteBatch);
                    player.DrawUI(spriteBatch, gameTime);

                    break;

                case GameState.DeathFreeze:
                    if (deathAnimationTimer >= deathAnimationDuration)
                    {
                        GraphicsDevice.Clear(Color.Black);
                        
                    }

                    level.DrawMap(spriteBatch);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn1, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn2, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn3, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn4, Color.White);
                    foreach (Enemy e in enemyList)
                    {
                        e.Draw(spriteBatch);
                    }
                    foreach (Item i in itemList)
                    {
                        i.Draw(spriteBatch);
                    }
                    donkeyKong.Draw(spriteBatch);
                    pauline.Draw(spriteBatch);
                    player.DrawPlayer(spriteBatch);
                    player.DrawUI(spriteBatch, gameTime);
                    break;

                case GameState.ItemFreeze:
                    level.DrawMap(spriteBatch);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn1, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn2, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn3, Color.White);
                    spriteBatch.Draw(TextureManager.oilTex, oilSpawn4, Color.White);
                    foreach (Enemy e in enemyList)
                    {
                        e.Draw(spriteBatch);
                    }
                    foreach (Item i in itemList)
                    {
                        i.Draw(spriteBatch);
                    }
                    donkeyKong.Draw(spriteBatch);
                    pauline.Draw(spriteBatch);
                    player.DrawPlayer(spriteBatch);
                    player.DrawUI(spriteBatch, gameTime);
                    player.DrawScoreAddition(spriteBatch, gameTime, scoreVal);
                    break;

                case GameState.Fallout:
                    level.DrawMap(spriteBatch);
                    donkeyKong.Draw(spriteBatch);
                    pauline.Draw(spriteBatch);
                    player.DrawPlayer(spriteBatch);
                    player.DrawUI(spriteBatch, gameTime);
                    if (player.reachedTop)
                    {
                        spriteBatch.Draw(TextureManager.heartTex, new Vector2(13 * tileSize.X, 120), Color.White);
                        
                    }
                    break;
                
                case GameState.Lose:
                    spriteBatch.Draw(TextureManager.loseScreenTex, new Vector2(0, 0), Color.White);
                    break;

                case GameState.Win:
                    spriteBatch.DrawString(TextureManager.adore64Font, "YOU WON! WELL DONE", new Vector2(200, 300), Color.White);
                    player.DrawScore(spriteBatch);
                    break;
                case GameState.HighScores:
                    spriteBatch.DrawString(TextureManager.adore64Font, "HIGHSCORES:", new Vector2(300, 120), Color.White);
                    player.DrawHighscoreList(spriteBatch);
                    break;

            }
            spriteBatch.End();

            // TODO: Add your drawing code here

            base.Draw(gameTime);
        }

        public void FillItemList()
        {
            itemList.Clear();
            itemList.Add(umbrella);
            itemList.Add(hammer);
            itemList.Add(phone);
            itemList.Add(dress);
        }

        public void ResetGame()
        {
            player.ResetGame();
            donkeyKong.ResetMonkey();
            enemyList.Clear();
            level.BuildMap();
            destroy = null;
            FillItemList();
            level.levelComplete = false;
        }

        public void SpawnEnemy()
        {
            rand = new Random();
            int spawn = rand.Next(1, 5);
            int speed = rand.Next(75, 126);

            if (enemyList.Count < 5)
            {
                if (spawn == 1)
                {
                    enemyList.Add(new Enemy(TextureManager.enemySpritesheetTex, oilSpawn1, new Vector2(-1, 0), speed));
                }
                else if (spawn == 2)
                {
                    enemyList.Add(new Enemy(TextureManager.enemySpritesheetTex, oilSpawn2, new Vector2(-1, 0), speed));
                }
                else if (spawn == 3)
                {
                    enemyList.Add(new Enemy(TextureManager.enemySpritesheetTex, oilSpawn3, new Vector2(-1, 0), speed));
                }
                else if (spawn == 4)
                {
                    enemyList.Add(new Enemy(TextureManager.enemySpritesheetTex, oilSpawn4, new Vector2(-1, 0), speed));
                }
            }
        }


            
           
    }
}

