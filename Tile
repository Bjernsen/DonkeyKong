using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DonkeyKong
{
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        Level level;
        Player player;
        Enemy enemy1;
        TextureManager texMan;

        string startScreenText, loseScreenText;

        enum GameState
        {
            Start,
            Playing,
            End,
            HighScores,
            CharacterSelect
        }

        GameState currentGameState;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            graphics.PreferredBackBufferWidth = 1040;
            graphics.PreferredBackBufferHeight = 826;
            graphics.ApplyChanges();
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);
            texMan = new TextureManager(Content);
            level = new Level("Map1.txt");
            player = new Player(TextureManager.marioSpritesheetTex);
            enemy1 = new Enemy(TextureManager.enemySpritesheetTex, new Rectangle(320, 646, TextureManager.enemySpritesheetTex.Width, TextureManager.enemySpritesheetTex.Height));

            startScreenText = "PRESS ENTER TO PLAY\nPRESS SPACE TO CHOOSE\nCHARACTER";
            loseScreenText = "PRESS ENTER TO PLAY AGAIN\nPRESS SPACE FOR MAIN MENU";
         
            level.BuildMap();

            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// game-specific content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            IsMouseVisible = true;
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();
            KeyMouseReader.Update();

            switch (currentGameState)
            {
                case GameState.Start:
                    if (Keyboard.GetState().IsKeyDown(Keys.Enter))
                    {
                        currentGameState = GameState.Playing;
                    }
                    if (Keyboard.GetState().IsKeyDown(Keys.Space))
                    {
                        currentGameState = GameState.CharacterSelect;
                    }
                    break;

                case GameState.Playing:
                    player.Update(gameTime);
                    enemy1.Update(gameTime);
                    if (player.IsDead())
                    {
                        currentGameState = GameState.End;
                    }
                    break;

                case GameState.End:
                    if (Keyboard.GetState().IsKeyDown(Keys.Enter))
                    {
                        currentGameState = GameState.HighScores;
                    }
                    break;

                case GameState.HighScores:
                    if (Keyboard.GetState().IsKeyDown(Keys.Enter))
                    {
                        currentGameState = GameState.Playing;
                    }
                    if (Keyboard.GetState().IsKeyDown(Keys.Space))
                    {
                        currentGameState = GameState.Start;
                    }
                    break;
            }

            
            

            

            // TODO: Add your update logic here

            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.Black);

            spriteBatch.Begin();
            switch (currentGameState)
            {
                case GameState.Start:
                    spriteBatch.Draw(TextureManager.startScreenTex, new Vector2(0, 0), Color.White);
                    spriteBatch.DrawString(TextureManager.adore64Font, startScreenText, new Vector2(200, 650), Color.White);
                    break;

                case GameState.Playing:

                    level.DrawMap(spriteBatch);
                    enemy1.Draw(spriteBatch);
                    player.DrawPlayer(spriteBatch);
                    player.DrawUI(spriteBatch);

                    break;

                case GameState.End:
                    spriteBatch.Draw(TextureManager.loseScreenTex, new Vector2(0, 0), Color.White);
                    break;
            }
            spriteBatch.End();

            // TODO: Add your drawing code here

            base.Draw(gameTime);
         }

            
           
        }

        

        
    }

